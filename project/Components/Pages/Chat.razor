@rendermode InteractiveServer // Needed for interactive components!!!
@page "/"
@using MudBlazor

<PageTitle>Chat</PageTitle>

<MudCard>
    <MudCardContent Style="height: 70vh; overflow-y: auto;">
        @foreach (var message in chatMessages)
        {
            <MudPaper Class="my-2 p-2" Elevation="0">
                <MudText Typo="Typo.body1">@message.Content</MudText>
            </MudPaper>
        }
    </MudCardContent>
    <MudCardActions>
        <MudForm @ref="form">
            <MudTextField @bind-Value="currentMessage" 
                          T="string" 
                          Label="Message" 
                          Variant="Variant.Outlined"
                          Adornment="Adornment.End" 
                          AdornmentIcon="@Icons.Material.Filled.Send" 
                          OnAdornmentClick="AddChat" 
                          OnKeyDown="@(e => Enter(e))"
                          Required="true"
                          RequiredError="Message is required!" />
        </MudForm>
    </MudCardActions>
</MudCard>

@code {
    private string currentMessage = "";
    private List<ChatMessage> chatMessages = new();
    private MudForm? form;

    private void AddChat()
    {
        // Log the message to the console
        Console.WriteLine(currentMessage);

        form?.Validate();
        if (!string.IsNullOrWhiteSpace(currentMessage))
        {
            chatMessages.Add(new ChatMessage { Content = currentMessage });
            currentMessage = "";  // Limpar o campo após o envio da mensagem
            StateHasChanged();    // Forçar a atualização da interface
        }
    }

    private void Enter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey) // Verifica se Enter foi pressionado sem Shift
        {
            AddChat();
        }
    }

    private class ChatMessage
    {
        public string Content { get; set; } = "";
    }
}